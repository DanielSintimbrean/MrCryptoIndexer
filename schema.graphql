"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type CollectionInfo {
  address: String!
  description: String!
  holders: Int!
  lastSale: String!
  name: String!
  volumen: [Volumen!]!
}

type Currency {
  amount: Int!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type E7L {
  E7LTokens: [E7LToken!]!
  linked: Int!
  name: String!
  supply: Int!
  synchronized: Int!
}

type E7LToken {
  E7L: E7L!
  Owner: Holder!
  imageURL: String!
  linked: Boolean!
  metadata: String!
  mrCrypto: MrCrypto
  synced: Boolean!
  tokenId: Int!
}

type Holder {
  address: String!
  mrCryptosOwned: [MrCrypto!]!
  numberOfMrCryptos: Int!
}

type MrCrypto {
  E7LTokens: [E7LToken!]!
  Owner: Holder!
  Transfers: [Transfer!]!
  imageURL: String!
  metadata: String!
  tokenId: Int!
}

enum OrderByInput {
  asc
  desc
}

type Payment {
  Currencies: [Currency!]!
  Transfer: [Transfer!]!
}

type Query {
  E7L: [E7L!]!
  collectionInfo: CollectionInfo!
  e7lTokens(first: Int! = 100, skip: Int! = 0): [E7LToken!]!
  mrCryptoByAddress(address: String!): [MrCrypto!]!
  mrCryptoById(data: TokenIdInput!): MrCrypto!
  sales(first: Int! = 100, order: OrderByInput! = desc, orderBy: SalesOrderByEnum! = blockNumber, skip: Int! = 0): [Payment!]!
  topHolders(take: Int! = 10): [Holder!]!
  transfers(first: Int! = 100, order: OrderByInput! = desc, skip: Int! = 0): [Transfer!]!
}

enum SalesOrderByEnum {
  amount
  blockNumber
}

input TokenIdInput {
  tokenId: Int!
}

type Transfer {
  MrCrypto: MrCrypto!
  Payment: Payment
  blockNumber: BigInt!
  from: String!
  to: String!
}

type Volumen {
  amount: Float!
  currency: String!
}